<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title></title>
    <link rel="stylesheet" href="/css/main.css">
    <link href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css" rel="stylesheet"/>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <script src="http://d3js.org/d3.v3.min.js"></script>

</head>
<style>
    body{
        width:1160px;
        margin:50px auto;
    }
    path {  stroke: #fff; }
    path:hover {  opacity:0.9; }
    rect:hover {  fill:blue; }
    .axis {  font: 10px sans-serif; }
    .legend tr{    border-bottom:1px solid grey; }
    .legend tr:first-child{    border-top:1px solid grey; }

    .axis path,
    .axis line {
        fill: none;
        stroke: #000;
        shape-rendering: crispEdges;
    }

    .x.axis path {  display: none; }
    .legend{
        margin-bottom:180px;
        display:inline-block;
        border-collapse: collapse;
        border-spacing: 0px;
    }
    .legend td{
        padding:4px 5px;
        vertical-align:bottom;
    }
    .legendFreq, .legendPerc{
        align:right;
        width:50px;
    }
    .axis { font: 14px sans-serif; }


</style>
<body>


<div class="container_fluid" style="margin-top: 30px">
    <h1 style="text-align: center"> Welcome, <%= name.toUpperCase()%></h1>

    <section class="container text-right">
        <div class="btn-toolbar">
            <button type="button" class="btn btn-primary" onclick="goToHome()">
                <span class="glyphicon glyphicon-home" aria-hidden="true"></span> Home
            </button>
            <button type="button" class="btn btn-primary" onclick="goToLogOut()">LogOut</button>
            <script>
                function goToHome() {
                    location.href = "/personalized_post/1";
                }

                function goToLogOut() {
                    location.href = "/logout";
                }
            </script>
        </div>
    </section>
    <div class="row" style="margin-top: 50px">
        <div class="col-sm-6 col-md-4">
            <div class="thumbnail" style="background-color: wheat">
                <div class="caption">
                    <h3 style="text-align: center">Profile Tags</h3>
                    <h3 style="text-align: center;color: #953b39"><%= user_user_tags.length %></h3>
                </div>
            </div>

        </div>
        <div class="col-sm-6 col-md-4">
            <div class="thumbnail" style="background-color: wheat">
                <div class="caption">
                    <h3 style="text-align: center">New tags</h3>
                    <h3 style="text-align: center;color: #953b39"><%= user_temporary_user_tags.length %></h3>

                </div>
            </div>

        </div>
        <div class="col-sm-6 col-md-4">
            <div class="thumbnail" style="background-color: wheat">
                <div class="caption">
                    <h3 style="text-align: center">Favorite Questions</h3>
                    <h3 style="text-align: center;color: #953b39"><%= user_favorites.length %></h3>

                </div>
            </div>

        </div>
    </div>
    <div id='dashboard' style="margin-top: 100px;margin-left: 80px">
    </div>
    <script>
        function dashboard(id, fData){
            var barColor = 'steelblue';
            function segColor(c){ return {UpVotes:"#807dba", DownVotes:"#e08214",TagsClicked:"#41ab5d"}[c]; }

            // compute total for each state.
            fData.forEach(function(d){d.total=d.freq.UpVotes+d.freq.DownVotes+d.freq.TagsClicked;});

            // function to handle histogram.
            function histoGram(fD){
                var hG={},    hGDim = {t: 60, r: 0, b: 20, l: 0};
                hGDim.w = 500 - hGDim.l - hGDim.r,
                    hGDim.h = 300 - hGDim.t - hGDim.b;

                //create svg for histogram.
                var hGsvg = d3.select(id).append("svg")
                    .attr("width", hGDim.w + hGDim.l + hGDim.r)
                    .attr("height", 500).append("g")
                    .attr("transform", "translate(400,0)rotate(90)");

                // create function for x-axis mapping.
                var x = d3.scale.ordinal().rangeRoundBands([0, hGDim.w], 0.1)
                    .domain(fD.map(function(d) { return d[0]; }));

                // Add x-axis to the histogram svg.
                hGsvg.append("g").attr("class", "y axis")
                    .attr("transform", "translate(0," + hGDim.h + ")")
                    .call(d3.svg.axis().scale(x).orient("bottom"))
                    .selectAll("text")
                    .style("text-anchor", "end")
                    .attr("dx", "-.8em")
                    .attr("dy", ".15em")
                    .attr("transform", function(d) {
                        return "rotate(-90)"
                    });

                // Create function for y-axis map.
                var y = d3.scale.linear().range([hGDim.h, 0])
                    .domain([0, d3.max(fD, function(d) { return d[1]; })]);

                // Create bars for histogram to contain rectangles and freq labels.
                var bars = hGsvg.selectAll(".bar").data(fD).enter()
                    .append("g").attr("class", "bar");

                //create the rectangles.
                bars.append("rect")
                    .attr("x", function(d) { return x(d[0]); })
                    .attr("y", function(d) { return y(d[1]); })
                    .attr("width", x.rangeBand())
                    .attr("height", function(d) { return hGDim.h - y(d[1]); })
                    .attr('fill',barColor)
                    .on("mouseover",mouseover)// mouseover is defined below.
                    .on("mouseout",mouseout);
                //Create the frequency labels above the rectangles.
                bars.append("text").text(function(d){ return d3.format(",")(d[1])})
                    .attr("x", function(d) { return x(d[0])+x.rangeBand()/2; })
                    .attr("y", function(d) { return y(d[1])-5; })
                    .attr("text-anchor", "middle");

                function mouseover(d){  // utility function to be called on mouseover.
                    // filter for selected state.
                    var st = fData.filter(function(s){ return s.State == d[0];})[0],
                        nD = d3.keys(st.freq).map(function(s){ return {type:s, freq:st.freq[s]};});

                    // call update functions of pie-chart and legend.
                    pC.update(nD);
                    leg.update(nD);
                }

                function mouseout(d){    // utility function to be called on mouseout.
                    // reset the pie-chart and legend.
                    pC.update(tF);
                    leg.update(tF);
                }

                // create function to update the bars. This will be used by pie-chart.
                hG.update = function(nD, color){
                    // update the domain of the y-axis map to reflect change in frequencies.
                    y.domain([0, d3.max(nD, function(d) { return d[1]; })]);

                    // Attach the new data to the bars.
                    var bars = hGsvg.selectAll(".bar").data(nD);

                    // transition the height and color of rectangles.
                    bars.select("rect").transition().duration(500)
                        .attr("y", function(d) {return y(d[1]); })
                        .attr("height", function(d) { return hGDim.h - y(d[1]); })
                        .attr("fill", color);

                    // transition the frequency labels location and change value.
                    bars.select("text").transition().duration(500)
                        .text(function(d){ return d3.format(",")(d[1])})
                        .attr("y", function(d) {return y(d[1])-5; });
                }
                return hG;
            }

            // function to handle pieChart.
            function pieChart(pD){
                var pC ={},    pieDim ={w:250, h: 250};
                pieDim.r = Math.min(pieDim.w, pieDim.h) / 2;

                // create svg for pie chart.
                var piesvg = d3.select(id).append("svg")
                    .attr("width", 290).attr("height", 400).append("g")
                    .attr("transform", "translate(150,150)");

                // create function to draw the arcs of the pie slices.
                var arc = d3.svg.arc().outerRadius(pieDim.r - 10).innerRadius(0);

                // create a function to compute the pie slice angles.
                var pie = d3.layout.pie().sort(null).value(function(d) { return d.freq; });

                // Draw the pie slices.
                piesvg.selectAll("path").data(pie(pD)).enter().append("path").attr("d", arc)
                    .each(function(d) { this._current = d; })
                    .style("fill", function(d) { return segColor(d.data.type); })
                    .on("mouseover",mouseover).on("mouseout",mouseout);

                // create function to update pie-chart. This will be used by histogram.
                pC.update = function(nD){
                    piesvg.selectAll("path").data(pie(nD)).transition().duration(500)
                        .attrTween("d", arcTween);
                }
                // Utility function to be called on mouseover a pie slice.
                function mouseover(d){
                    // call the update function of histogram with new data.
                    hG.update(fData.map(function(v){
                        return [v.State,v.freq[d.data.type]];}),segColor(d.data.type));
                }
                //Utility function to be called on mouseout a pie slice.
                function mouseout(d){
                    // call the update function of histogram with all data.
                    hG.update(fData.map(function(v){
                        return [v.State,v.total];}), barColor);
                }
                // Animating the pie-slice requiring a custom function which specifies
                // how the intermediate paths should be drawn.
                function arcTween(a) {
                    var i = d3.interpolate(this._current, a);
                    this._current = i(0);
                    return function(t) { return arc(i(t));    };
                }
                return pC;
            }

            // function to handle legend.
            function legend(lD){
                var leg = {};

                // create table for legend.
                var legend = d3.select(id).append("table").attr('class','legend');

                // create one row per segment.
                var tr = legend.append("tbody").selectAll("tr").data(lD).enter().append("tr");

                // create the first column for each segment.
                tr.append("td").append("svg").attr("width", '16').attr("height", '16').append("rect")
                    .attr("width", '50').attr("height", '30')
                    .attr("fill",function(d){ return segColor(d.type); });

                // create the second column for each segment.
                tr.append("td").text(function(d){ return d.type;})
                    .attr("width", '50').attr("height", '30');

                // create the third column for each segment.
                tr.append("td").attr("class",'legendFreq')
                    .text(function(d){ return d3.format(",")(d.freq);})
                    .attr("width", '50').attr("height", '30');

                // create the fourth column for each segment.
                tr.append("td").attr("class",'legendPerc')
                    .text(function(d){ return getLegend(d,lD);})
                    .attr("width", '50').attr("height", '30');

                // Utility function to be used to update the legend.
                leg.update = function(nD){
                    // update the data attached to the row elements.
                    var l = legend.select("tbody").selectAll("tr").data(nD);

                    // update the frequencies.
                    l.select(".legendFreq").text(function(d){ return d3.format(",")(d.freq);});

                    // update the percentage column.
                    l.select(".legendPerc").text(function(d){ return getLegend(d,nD);});
                }

                function getLegend(d,aD){ // Utility function to compute percentage.
                    return d3.format("%")(d.freq/d3.sum(aD.map(function(v){ return v.freq; })));
                }

                return leg;
            }

            // calculate total frequency by segment for all state.
            var tF = ['UpVotes','DownVotes','TagsClicked'].map(function(d){
                return {type:d, freq: d3.sum(fData.map(function(t){ return t.freq[d];}))};
            });

            // calculate total frequency by state for all segment.
            var sF = fData.map(function(d){return [d.State,d.total];});

            var hG = histoGram(sF), // create the histogram.
                pC = pieChart(tF), // create the pie-chart.
                leg= legend(tF);  // create the legend.
        }
    </script>



    <script>
        <% var upvoted_tags=[],downvoted_tags=[],temp_tags=[],data=[];
        for (var i=0;i<user_up_voted.length;i++){

            upvoted_tags.push(user_up_voted[i].tags)

        }
        for (var i=0;i<user_down_voted.length;i++){

            downvoted_tags.push(user_down_voted[i].tags)

        }
        for (var i=0;i<user_temporary_user_tags.length;i++){

            temp_tags.push(user_temporary_user_tags[i].tags)

        }
        function onlyUnique(value, index, self) {
            return self.indexOf(value) === index;
        }
        var combined=upvoted_tags.concat(downvoted_tags).concat(temp_tags)
        var unique_tags=combined.filter(onlyUnique)
        for(var i=0;i<unique_tags.length;i++){

            var temp_data={}
            var counts={}
            temp_data['State']=unique_tags[i]
            if (!(upvoted_tags.includes(unique_tags[i]))) {
                counts['UpVotes'] = 0
            } else {
                var index = upvoted_tags.indexOf(unique_tags[i])
                counts['UpVotes'] = user_up_voted[index].count
            }
            if (!(downvoted_tags.includes(unique_tags[i]))) {
                counts['DownVotes'] = 0
            } else {
                var index = downvoted_tags.indexOf(unique_tags[i])
                counts['DownVotes'] = user_down_voted[index].count
            }
            if (!(temp_tags.includes(unique_tags[i]))) {
                counts['TagsClicked'] = 0
            } else {
                var index = temp_tags.indexOf(unique_tags[i])
                counts['TagsClicked'] = user_temporary_user_tags[index].count
            }
            temp_data['freq']=counts
            data.push(temp_data)

        }
        %>
        var freqData=[]
        freqData=JSON.parse('<%-JSON.stringify(data)%>')
        dashboard('#dashboard',freqData);
    </script>



</div>
</body>
</html>